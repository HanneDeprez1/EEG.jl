{
    "docs": [
        {
            "location": "/", 
            "text": "EEG.jl Manual\n\n\nProcess EEG files in Julia.\n\n\nFor research only. Not for clinical use. Use at your own risk\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#eegjl-manual", 
            "text": "Process EEG files in Julia.  For research only. Not for clinical use. Use at your own risk .", 
            "title": "EEG.jl Manual"
        }, 
        {
            "location": "/assr/assr/", 
            "text": "#\n\n\nEEG.SSR\n \n \nType\n.\n\n\nType for storing steady state response (SSR) data.\n\n\nThe minimum required information for SSR recording is stored in the type. Additional information can be stored in the \nprocessing\n field. To facilitate processing, specific names are used in the processing dictionary.\n\n\nFields\n\n\n\n\ndata\n: contains the recorded data\n\n\ntrigers\n: contains information about timing for creation of epochs\n\n\nsystem_codes\n: contains system information\n\n\nsamplingrate\n: the sampling rate of the data\n\n\nmodulationrate\n: the modulation rate of the stimulus\n\n\nreference_channel\n: the channel the data has been referenced to\n\n\nfile_path\n and \nfile_name\n: where the file was read in from\n\n\nchannel_names\n: the names of the channels\n\n\nprocessing\n: dictionary type to store analysis\n\n\nheader\n: additional information read from the file\n\n\n\n\nAdditional \nprocessing\n fields\n\n\nThe following standard names are used when saving data to the processing dictionary.\n\n\n\n\nName\n: The identifier for the participant\n\n\nSide\n: Side of stimulation\n\n\nCarrier_Frequency\n: Carrier frequency of the stimulus\n\n\nAmplitude\n: Amplitude of the stimulus\n\n\nepochs\n: The epochs extracted from the recording\n\n\nsweeps\n: The extracted sweeps from the recording\n\n\n\n\nExample\n\n\nPut an example here\n\n\ns = SSR(\nfilename\n)", 
            "title": "Definition"
        }, 
        {
            "location": "/assr/examples/", 
            "text": "Examples\n\n\n\n\nPlot single and multi channel data\n\n\nusing EEG\n\ns = read_SSR(\nfile.bdf\n)\ns = highpass_filter(s)\ns = rereference(s, \nCz\n)\ns = trim_channel(s, 8192*80, start = 8192*50)\n\nplot_timeseries(s, channels=\nP6\n)\nplot_timeseries(s)", 
            "title": "Examples"
        }, 
        {
            "location": "/assr/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/assr/examples/#plot-single-and-multi-channel-data", 
            "text": "using EEG\n\ns = read_SSR( file.bdf )\ns = highpass_filter(s)\ns = rereference(s,  Cz )\ns = trim_channel(s, 8192*80, start = 8192*50)\n\nplot_timeseries(s, channels= P6 )\nplot_timeseries(s)", 
            "title": "Plot single and multi channel data"
        }, 
        {
            "location": "/assr/functions/", 
            "text": "Functions\n\n\nA number of functions are provided for the processing of SSR data.\n\n\n\n\nPreprocessing\n\n\n#\n\n\nEEG.highpass_filter\n \n \nMethod\n.\n\n\nHigh pass filter applied in forward and reverse direction\n\n\nSimply a wrapper for the DSP.jl functions\n\n\nArguments\n\n\n\n\nsignals\n: Signal data in the format samples x channels\n\n\ncutOff\n: Cut off frequency in Hz\n\n\nfs\n: Sampling rate\n\n\norder\n: Filter orde\n\n\n\n\nReturns\n\n\n\n\nfiltered signal\n\n\nfilter used on signal\n\n\n\n\nrereference(::SSR, ::AbstractString)", 
            "title": "Functions"
        }, 
        {
            "location": "/assr/functions/#functions", 
            "text": "A number of functions are provided for the processing of SSR data.", 
            "title": "Functions"
        }, 
        {
            "location": "/assr/functions/#preprocessing", 
            "text": "#  EEG.highpass_filter     Method .  High pass filter applied in forward and reverse direction  Simply a wrapper for the DSP.jl functions  Arguments   signals : Signal data in the format samples x channels  cutOff : Cut off frequency in Hz  fs : Sampling rate  order : Filter orde   Returns   filtered signal  filter used on signal   rereference(::SSR, ::AbstractString)", 
            "title": "Preprocessing"
        }
    ]
}