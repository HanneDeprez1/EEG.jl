{
    "docs": [
        {
            "location": "/", 
            "text": "EEG.jl Manual\n\n\nProcess EEG files in Julia.\n\n\nFor research only. Not for clinical use. Use at your own risk\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#eegjl-manual", 
            "text": "Process EEG files in Julia.  For research only. Not for clinical use. Use at your own risk .", 
            "title": "EEG.jl Manual"
        }, 
        {
            "location": "/examples/ASSR/", 
            "text": "Steady State Responses\n\n\n#\n\n\nEEG.SSR\n \n \nType\n.\n\n\nType for storing steady state response (SSR) data.\n\n\nThe minimum required information for SSR recording is stored in the type. Additional information can be stored in the \nprocessing\n field. To facilitate processing, specific names are used in the processing dictionary.\n\n\nFields\n\n\n\n\ndata\n: contains the recorded data\n\n\ntrigers\n: contains information about timing for creation of epochs\n\n\nsystem_codes\n: contains system information\n\n\nsamplingrate\n: the sampling rate of the data\n\n\nmodulationrate\n: the modulation rate of the stimulus\n\n\nreference_channel\n: the channel the data has been referenced to\n\n\nfile_path\n and \nfile_name\n: where the file was read in from\n\n\nchannel_names\n: the names of the channels\n\n\nprocessing\n: dictionary type to store analysis\n\n\nheader\n: additional information read from the file\n\n\n\n\nAdditional \nprocessing\n fields\n\n\nThe following standard names are used when saving data to the processing dictionary.\n\n\n\n\nName\n: The identifier for the participant\n\n\nSide\n: Side of stimulation\n\n\nCarrier_Frequency\n: Carrier frequency of the stimulus\n\n\nAmplitude\n: Amplitude of the stimulus\n\n\nepochs\n: The epochs extracted from the recording\n\n\nsweeps\n: The extracted sweeps from the recording\n\n\n\n\nExample\n\n\nPut an example here ```julia s = SSR(\"filename\") end\n\n\n\nusing EEG, DataFrames, Gadfly\n\ns = read_SSR(\nExample-40Hz.bdf\n)\ns = highpass_filter(s)\ns.modulationrate = assr_frequency(40)\ns = rereference(s, \nCz\n)\ns = merge_channels(s, EEG_Vanvooren_2014, \nMerged\n)\n    remove_channel!(s, EEG_64_10_20)\ns = extract_epochs(s)\ns = create_sweeps(s, epochsPerSweep = 16)\ns = ftest(s, collect([[2:2:162], modulationrate(s)*[1, 2, 3, 4]]))\n\ns.processing[\nstatistics\n][:Significant] = s.processing[\nstatistics\n][:Statistic] .\n 0.05\nscatter(s.processing[\nstatistics\n], \n    :AnalysisFrequency, :SNRdB , group=:Significant,\n    xlabel = \nFrequency (Hz)\n, \n    ylabel = \nSNR (dB)\n, \n    xlims = (0, 170), markersize = 10)\n\nvline!(modulationrate(s) * [1 2 3 4], ylims = (-10, 30), linestyle = :dashed)", 
            "title": "ASSR"
        }, 
        {
            "location": "/examples/ASSR/#steady-state-responses", 
            "text": "#  EEG.SSR     Type .  Type for storing steady state response (SSR) data.  The minimum required information for SSR recording is stored in the type. Additional information can be stored in the  processing  field. To facilitate processing, specific names are used in the processing dictionary.  Fields   data : contains the recorded data  trigers : contains information about timing for creation of epochs  system_codes : contains system information  samplingrate : the sampling rate of the data  modulationrate : the modulation rate of the stimulus  reference_channel : the channel the data has been referenced to  file_path  and  file_name : where the file was read in from  channel_names : the names of the channels  processing : dictionary type to store analysis  header : additional information read from the file   Additional  processing  fields  The following standard names are used when saving data to the processing dictionary.   Name : The identifier for the participant  Side : Side of stimulation  Carrier_Frequency : Carrier frequency of the stimulus  Amplitude : Amplitude of the stimulus  epochs : The epochs extracted from the recording  sweeps : The extracted sweeps from the recording   Example  Put an example here ```julia s = SSR(\"filename\") end  \nusing EEG, DataFrames, Gadfly\n\ns = read_SSR( Example-40Hz.bdf )\ns = highpass_filter(s)\ns.modulationrate = assr_frequency(40)\ns = rereference(s,  Cz )\ns = merge_channels(s, EEG_Vanvooren_2014,  Merged )\n    remove_channel!(s, EEG_64_10_20)\ns = extract_epochs(s)\ns = create_sweeps(s, epochsPerSweep = 16)\ns = ftest(s, collect([[2:2:162], modulationrate(s)*[1, 2, 3, 4]]))\n\ns.processing[ statistics ][:Significant] = s.processing[ statistics ][:Statistic] .  0.05\nscatter(s.processing[ statistics ], \n    :AnalysisFrequency, :SNRdB , group=:Significant,\n    xlabel =  Frequency (Hz) , \n    ylabel =  SNR (dB) , \n    xlims = (0, 170), markersize = 10)\n\nvline!(modulationrate(s) * [1 2 3 4], ylims = (-10, 30), linestyle = :dashed)", 
            "title": "Steady State Responses"
        }, 
        {
            "location": "/examples/source/", 
            "text": "Source\n\n\nIf you have source activity saved in a *.dat file (eg BESA) you can plot the estimated activity and local peaks of activity.\n\n\nusing EEG\n\nt = read_VolumeImage(\nexample.dat\n)\n\np = EEG.plot(t, c=:darkrainbow)\np = EEG.plot(t, find_dipoles(t), l = \nPeak Activity\n, c=:black)", 
            "title": "Source Analysis"
        }, 
        {
            "location": "/examples/source/#source", 
            "text": "If you have source activity saved in a *.dat file (eg BESA) you can plot the estimated activity and local peaks of activity.  using EEG\n\nt = read_VolumeImage( example.dat )\n\np = EEG.plot(t, c=:darkrainbow)\np = EEG.plot(t, find_dipoles(t), l =  Peak Activity , c=:black)", 
            "title": "Source"
        }
    ]
}