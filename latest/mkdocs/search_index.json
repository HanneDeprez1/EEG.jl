{
    "docs": [
        {
            "location": "/", 
            "text": "EEG.jl Manual\n\n\nProcess EEG files in Julia.\n\n\nFor research only. Not for clinical use. Use at your own risk\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#eegjl-manual", 
            "text": "Process EEG files in Julia.  For research only. Not for clinical use. Use at your own risk .", 
            "title": "EEG.jl Manual"
        }, 
        {
            "location": "/assr/assr/", 
            "text": "#\n\n\nEEG.SSR\n \n \nType\n.\n\n\nType for storing steady state response (SSR) data.\n\n\nThe minimum required information for SSR recording is stored in the type. Additional information can be stored in the \nprocessing\n field. To facilitate processing, specific names are used in the processing dictionary.\n\n\nFields\n\n\n\n\ndata\n: contains the recorded data\n\n\ntrigers\n: contains information about timing for creation of epochs\n\n\nsystem_codes\n: contains system information\n\n\nsamplingrate\n: the sampling rate of the data\n\n\nmodulationrate\n: the modulation rate of the stimulus\n\n\nreference_channel\n: the channel the data has been referenced to\n\n\nfile_path\n and \nfile_name\n: where the file was read in from\n\n\nchannel_names\n: the names of the channels\n\n\nprocessing\n: dictionary type to store analysis\n\n\nheader\n: additional information read from the file\n\n\n\n\nAdditional \nprocessing\n fields\n\n\nThe following standard names are used when saving data to the processing dictionary.\n\n\n\n\nName\n: The identifier for the participant\n\n\nSide\n: Side of stimulation\n\n\nCarrier_Frequency\n: Carrier frequency of the stimulus\n\n\nAmplitude\n: Amplitude of the stimulus\n\n\nepochs\n: The epochs extracted from the recording\n\n\nsweeps\n: The extracted sweeps from the recording\n\n\n\n\nExample\n\n\nPut an example here\n\n\ns = SSR(\nfilename\n)\n\n\n\n\nsource", 
            "title": "Definition"
        }, 
        {
            "location": "/assr/examples/", 
            "text": "Examples\n\n\n\n\nPlot single and multi channel data\n\n\nusing EEG\n\ns = read_SSR(\nfile.bdf\n)\ns = highpass_filter(s)\ns = rereference(s, \nCz\n)\ns = trim_channel(s, 8192*80, start = 8192*50)\n\nplot_timeseries(s, channels=\nP6\n)\nplot_timeseries(s)", 
            "title": "Examples"
        }, 
        {
            "location": "/assr/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/assr/examples/#plot-single-and-multi-channel-data", 
            "text": "using EEG\n\ns = read_SSR( file.bdf )\ns = highpass_filter(s)\ns = rereference(s,  Cz )\ns = trim_channel(s, 8192*80, start = 8192*50)\n\nplot_timeseries(s, channels= P6 )\nplot_timeseries(s)", 
            "title": "Plot single and multi channel data"
        }, 
        {
            "location": "/assr/functions/", 
            "text": "Functions\n\n\nA number of functions are provided for the processing of SSR data.\n\n\n\n\nImport\n\n\n#\n\n\nEEG.read_SSR\n \n \nFunction\n.\n\n\nRead SSR from file or IO stream\n\n\nRead a file or IO stream and store the data in an \nSSR\n type.\n\n\nMatching .mat files are read and modulation frequency information extracted. Failing that, user passed arguments are used or the modulation frequency is extracted from the file name.\n\n\nArguments\n\n\n\n\nfname\n: Name of the file to be read\n\n\nmin_epoch_length\n: Minimum epoch length in samples. Shorter epochs will be removed (0)\n\n\nmax_epoch_length\n: Maximum epoch length in samples. Longer epochs will be removed (0 = all)\n\n\nvalid_triggers\n: Triggers that are considered valid, others are removed ([1,2])\n\n\nstimulation_amplitude\n: Amplitude of stimulation (NaN)\n\n\nmodulationrate\n: Modulation frequency of SSR stimulation (NaN)\n\n\ncarrier_frequency\n: Carrier frequency (NaN)\n\n\nparticipant_name\n: Name of participant (\"\")\n\n\nremove_first\n: Number of epochs to be removed from start of recording (0)\n\n\nmax_epochs\n: Maximum number of epochs to retain (0 = all)\n\n\nenv\n (nothing)\n\n\nbkt\n (\"\")\n\n\n\n\nSupported file formats\n\n\n\n\nBIOSEMI (.bdf)\n\n\n\n\nsource\n\n\n\n\nPreprocessing\n\n\n\n\nFiltering\n\n\n#\n\n\nEEG.highpass_filter\n \n \nMethod\n.\n\n\nhighpass_filter(a::SSR; cutOff::Real=2, fs::Real=samplingrate(a), order::Int=3, tolerance::Real=0.01, kwargs...)\n\n\n\n\nApplly a high pass filter.\n\n\nA zero phase high pass filter is applied to the data using \nfiltfilt\n. A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.\n\n\nExample\n\n\na = highpass_filter(a)\n# or\na = highpass_filter(a, cutOff = 1)\n\n\n\n\nsource\n\n\n\n\nReferencing\n\n\n#\n\n\nEEG.rereference\n \n \nMethod\n.\n\n\nrereference(a::SSR, refChan::Union{AbstractString, Array{AbstractString}}; kwargs...)\n\n\n\n\nReference data to specified channel(s).\n\n\nExample\n\n\na = rereference(a, \nCz\n)\n# or\na = rereference(a, [\nP9\n, \nP10\n])\n\n\n\n\nsource\n\n\n\n\nPlotting\n\n\n#\n\n\nEEG.plot_timeseries\n \n \nMethod\n.\n\n\nplot_timeseries(s::SSR; channels, fs, kwargs)\n\n\n\n\nPlot an SSR recording.\n\n\nPlot detailed single channel or general multichanel figure depending on how many channels are requested.\n\n\nInput\n\n\n\n\ns\n: SSR type\n\n\nchannels\n: The channels you want to plot, all if not specified\n\n\nfs\n: Sample rate\n\n\nOther optional arguements are passed to the Plots.jl functions\n\n\n\n\nOutput\n\n\nReturns a figure\n\n\nExample\n\n\nplot1 = plot_timeseries(s, channels=[\nP6\n, \nCz\n], plot_points=8192*4)\ndraw(PDF(\ntimeseries.pdf\n, 10inch, 6inch), plot1)\n\n\n\n\nsource", 
            "title": "Functions"
        }, 
        {
            "location": "/assr/functions/#functions", 
            "text": "A number of functions are provided for the processing of SSR data.", 
            "title": "Functions"
        }, 
        {
            "location": "/assr/functions/#import", 
            "text": "#  EEG.read_SSR     Function .  Read SSR from file or IO stream  Read a file or IO stream and store the data in an  SSR  type.  Matching .mat files are read and modulation frequency information extracted. Failing that, user passed arguments are used or the modulation frequency is extracted from the file name.  Arguments   fname : Name of the file to be read  min_epoch_length : Minimum epoch length in samples. Shorter epochs will be removed (0)  max_epoch_length : Maximum epoch length in samples. Longer epochs will be removed (0 = all)  valid_triggers : Triggers that are considered valid, others are removed ([1,2])  stimulation_amplitude : Amplitude of stimulation (NaN)  modulationrate : Modulation frequency of SSR stimulation (NaN)  carrier_frequency : Carrier frequency (NaN)  participant_name : Name of participant (\"\")  remove_first : Number of epochs to be removed from start of recording (0)  max_epochs : Maximum number of epochs to retain (0 = all)  env  (nothing)  bkt  (\"\")   Supported file formats   BIOSEMI (.bdf)   source", 
            "title": "Import"
        }, 
        {
            "location": "/assr/functions/#preprocessing", 
            "text": "", 
            "title": "Preprocessing"
        }, 
        {
            "location": "/assr/functions/#filtering", 
            "text": "#  EEG.highpass_filter     Method .  highpass_filter(a::SSR; cutOff::Real=2, fs::Real=samplingrate(a), order::Int=3, tolerance::Real=0.01, kwargs...)  Applly a high pass filter.  A zero phase high pass filter is applied to the data using  filtfilt . A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.  Example  a = highpass_filter(a)\n# or\na = highpass_filter(a, cutOff = 1)  source", 
            "title": "Filtering"
        }, 
        {
            "location": "/assr/functions/#referencing", 
            "text": "#  EEG.rereference     Method .  rereference(a::SSR, refChan::Union{AbstractString, Array{AbstractString}}; kwargs...)  Reference data to specified channel(s).  Example  a = rereference(a,  Cz )\n# or\na = rereference(a, [ P9 ,  P10 ])  source", 
            "title": "Referencing"
        }, 
        {
            "location": "/assr/functions/#plotting", 
            "text": "#  EEG.plot_timeseries     Method .  plot_timeseries(s::SSR; channels, fs, kwargs)  Plot an SSR recording.  Plot detailed single channel or general multichanel figure depending on how many channels are requested.  Input   s : SSR type  channels : The channels you want to plot, all if not specified  fs : Sample rate  Other optional arguements are passed to the Plots.jl functions   Output  Returns a figure  Example  plot1 = plot_timeseries(s, channels=[ P6 ,  Cz ], plot_points=8192*4)\ndraw(PDF( timeseries.pdf , 10inch, 6inch), plot1)  source", 
            "title": "Plotting"
        }
    ]
}